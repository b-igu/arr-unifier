import qbittorrentapi
import requests
import json
import os
from data.config import config

tv_directory = config["sonarr"]["tv_directory"]
tv_directory_remote = config["sonarr"]["tv_directory_remote"]
sonarr_base_url = config["sonarr"]["base_url"]
sonarr_api_key = config["sonarr"]["api_key"]

# instantiate a Client using the appropriate WebUI configuration
conn_info = dict(
    host=config["client"]["host"],
    port=config["client"]["port"],
    username=config["client"]["username"],
    password=config["client"]["password"]
)
qbt_client = qbittorrentapi.Client(**conn_info)

# test the provided login credentials.
try:
    qbt_client.auth_log_in()
except qbittorrentapi.LoginFailed as e:
    print(e)

# retrieve all torrents
torrents = qbt_client.torrents_info()

# get all series in sonarr
response_series = requests.get(f"{sonarr_base_url}/api/v3/series?apikey={sonarr_api_key}")
response_series_dict = json.loads(response_series.text)

for series_entry in response_series_dict:
    series_id = series_entry['id']
    print(f"Series id : {series_id}")
    
    # get all history entries from series
    response_history = requests.get(f"{sonarr_base_url}/api/v3/history/series?apikey={sonarr_api_key}&seriesId={series_id}")
    response_history_dict = json.loads(response_history.text)

    for history_entry in response_history_dict:
        if 'data' in history_entry:
            torrent_info_hash = ""
            dropped_path = ""
            torrent_to_move = None
            # when the action is "grabbed" check by hash
            if 'torrentInfoHash' in history_entry['data']:
                torrent_info_hash = history_entry['data']['torrentInfoHash']
                    
            # when the action is a manual import check by path
            if 'droppedPath' in history_entry['data']:
                dropped_path = history_entry['data']['droppedPath']

            for torrent in torrents:
                if torrent.hash == torrent_info_hash:
                    torrent_to_move = torrent
                    break
                if torrent.content_path in dropped_path:
                    torrent_to_move = torrent
                    break
                
            if torrent_to_move is not None:
                # get the series folder name generated by sonarr
                imported_path = series_entry['path']
                folder_name = imported_path.split('/')[-1]

                # create folder with same name on tv downloads directory
                folder_path = f"{tv_directory}/{folder_name}"
                folder_path_remote = f"{tv_directory_remote}/{folder_name}"
                os.makedirs(folder_path, exist_ok=True)

                # move torrent to created folder
                try:
                    qbt_client.torrents_set_save_path(save_path=folder_path_remote, torrent_hashes=[torrent_to_move.hash])
                    qbt_client.torrents_set_download_path(download_path=folder_path_remote, torrent_hashes=[torrent_to_move.hash])
                    qbt_client.torrents_set_location(location=folder_path_remote, torrent_hashes=[torrent_to_move.hash])
                except Exception as e2:
                    print(e2)

# be sure to log out:
qbt_client.auth_log_out()